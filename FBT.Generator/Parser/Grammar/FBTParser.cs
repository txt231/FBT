//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FBT.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class FBTParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, QUOTED_STRING=33, QUOTED_IMPORT=34, HEX=35, NUMBER=36, FLOAT=37, 
		UNQUOTED_STRING=38, CommentDirective=39, WS=40;
	public const int
		RULE_frostbiteType = 0, RULE_includeBlock = 1, RULE_include = 2, RULE_typeData = 3, 
		RULE_typeNamespace = 4, RULE_typeModule = 5, RULE_typeEnum = 6, RULE_enumName = 7, 
		RULE_enumData = 8, RULE_enumValuePair = 9, RULE_typeClass = 10, RULE_classTypeName = 11, 
		RULE_classInherrits = 12, RULE_classInherrit = 13, RULE_typeArray = 14, 
		RULE_arrayTypeName = 15, RULE_arrayRef = 16, RULE_arrayRefName = 17, RULE_typeDelegate = 18, 
		RULE_typeFunction = 19, RULE_functionData = 20, RULE_functionParamData = 21, 
		RULE_functionParamType = 22, RULE_functionParamTypeName = 23, RULE_functionParamName = 24, 
		RULE_typeInterface = 25, RULE_typeValueType = 26, RULE_valueTypeIdentifier = 27, 
		RULE_valueTypeName = 28, RULE_baseClassVariable = 29, RULE_baseClassName = 30, 
		RULE_baseFieldName = 31, RULE_structureData = 32, RULE_memberData = 33, 
		RULE_memberVisibility = 34, RULE_memberTypeName = 35, RULE_memberArrayType = 36, 
		RULE_memberName = 37, RULE_memberOffset = 38, RULE_memberDefaultValue = 39, 
		RULE_memberValue = 40, RULE_memberInstanceField = 41, RULE_memberArrayElement = 42, 
		RULE_typePrimitive = 43, RULE_primitiveTypeName = 44, RULE_classAttributes = 45, 
		RULE_typeAttributes = 46, RULE_typeAttributesData = 47, RULE_typeAttribute = 48, 
		RULE_basicTypeAttribute = 49, RULE_numeralTypeAttribute = 50, RULE_stringTypeAttribute = 51, 
		RULE_numeral = 52, RULE_float = 53;
	public static readonly string[] ruleNames = {
		"frostbiteType", "includeBlock", "include", "typeData", "typeNamespace", 
		"typeModule", "typeEnum", "enumName", "enumData", "enumValuePair", "typeClass", 
		"classTypeName", "classInherrits", "classInherrit", "typeArray", "arrayTypeName", 
		"arrayRef", "arrayRefName", "typeDelegate", "typeFunction", "functionData", 
		"functionParamData", "functionParamType", "functionParamTypeName", "functionParamName", 
		"typeInterface", "typeValueType", "valueTypeIdentifier", "valueTypeName", 
		"baseClassVariable", "baseClassName", "baseFieldName", "structureData", 
		"memberData", "memberVisibility", "memberTypeName", "memberArrayType", 
		"memberName", "memberOffset", "memberDefaultValue", "memberValue", "memberInstanceField", 
		"memberArrayElement", "typePrimitive", "primitiveTypeName", "classAttributes", 
		"typeAttributes", "typeAttributesData", "typeAttribute", "basicTypeAttribute", 
		"numeralTypeAttribute", "stringTypeAttribute", "numeral", "float"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'include'", "'namespace'", "';'", "'module'", "'enum'", 
		"'{'", "'}'", "'='", "'class'", "':'", "','", "'array'", "'->'", "'delegate'", 
		"'function'", "'in'", "'out'", "'inref'", "'outref'", "'unk'", "'interface'", 
		"'valuetype'", "'struct'", "'.'", "'public'", "'['", "']'", "'null'", 
		"'primitive'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "QUOTED_STRING", 
		"QUOTED_IMPORT", "HEX", "NUMBER", "FLOAT", "UNQUOTED_STRING", "CommentDirective", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FBT.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FBTParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FBTParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FBTParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FrostbiteTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IncludeBlockContext includeBlock() {
			return GetRuleContext<IncludeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDataContext[] typeData() {
			return GetRuleContexts<TypeDataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDataContext typeData(int i) {
			return GetRuleContext<TypeDataContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(FBTParser.Eof, 0); }
		public FrostbiteTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frostbiteType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterFrostbiteType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitFrostbiteType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrostbiteType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrostbiteTypeContext frostbiteType() {
		FrostbiteTypeContext _localctx = new FrostbiteTypeContext(Context, State);
		EnterRule(_localctx, 0, RULE_frostbiteType);
		int _la;
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108;
				includeBlock();
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1237427304L) != 0)) {
					{
					{
					State = 109;
					typeData();
					}
					}
					State = 114;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 115;
					typeData();
					}
					}
					State = 118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1237427304L) != 0) );
				State = 120;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext[] include() {
			return GetRuleContexts<IncludeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include(int i) {
			return GetRuleContext<IncludeContext>(i);
		}
		public IncludeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterIncludeBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitIncludeBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeBlockContext includeBlock() {
		IncludeBlockContext _localctx = new IncludeBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_includeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 124;
				include();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_IMPORT() { return GetToken(FBTParser.QUOTED_IMPORT, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 4, RULE_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(T__0);
			State = 131;
			Match(T__1);
			State = 132;
			Match(QUOTED_IMPORT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNamespaceContext typeNamespace() {
			return GetRuleContext<TypeNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModuleContext typeModule() {
			return GetRuleContext<TypeModuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeClassContext typeClass() {
			return GetRuleContext<TypeClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeEnumContext typeEnum() {
			return GetRuleContext<TypeEnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeValueTypeContext typeValueType() {
			return GetRuleContext<TypeValueTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArrayContext typeArray() {
			return GetRuleContext<TypeArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInterfaceContext typeInterface() {
			return GetRuleContext<TypeInterfaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeFunctionContext typeFunction() {
			return GetRuleContext<TypeFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDelegateContext typeDelegate() {
			return GetRuleContext<TypeDelegateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypePrimitiveContext typePrimitive() {
			return GetRuleContext<TypePrimitiveContext>(0);
		}
		public TypeDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDataContext typeData() {
		TypeDataContext _localctx = new TypeDataContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeData);
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 134;
				typeNamespace();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135;
				typeModule();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 136;
				typeClass();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 137;
				typeEnum();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 138;
				typeValueType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 139;
				typeArray();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 140;
				typeInterface();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 141;
				typeFunction();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 142;
				typeDelegate();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 143;
				typeInterface();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 144;
				typePrimitive();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public TypeNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNamespaceContext typeNamespace() {
		TypeNamespaceContext _localctx = new TypeNamespaceContext(Context, State);
		EnterRule(_localctx, 8, RULE_typeNamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(T__2);
			State = 148;
			Match(UNQUOTED_STRING);
			State = 149;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public TypeModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeModule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeModuleContext typeModule() {
		TypeModuleContext _localctx = new TypeModuleContext(Context, State);
		EnterRule(_localctx, 10, RULE_typeModule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(T__4);
			State = 152;
			Match(UNQUOTED_STRING);
			State = 153;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumNameContext enumName() {
			return GetRuleContext<EnumNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAttributesContext typeAttributes() {
			return GetRuleContext<TypeAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassAttributesContext classAttributes() {
			return GetRuleContext<ClassAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDataContext[] enumData() {
			return GetRuleContexts<EnumDataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDataContext enumData(int i) {
			return GetRuleContext<EnumDataContext>(i);
		}
		public TypeEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeEnumContext typeEnum() {
		TypeEnumContext _localctx = new TypeEnumContext(Context, State);
		EnterRule(_localctx, 12, RULE_typeEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 155;
				typeAttributes();
				}
			}

			State = 158;
			Match(T__5);
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 159;
				classAttributes();
				}
				break;
			}
			State = 162;
			enumName();
			State = 163;
			Match(T__6);
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__26 || _la==UNQUOTED_STRING) {
				{
				{
				State = 164;
				enumData();
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 170;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public EnumNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterEnumName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitEnumName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumNameContext enumName() {
		EnumNameContext _localctx = new EnumNameContext(Context, State);
		EnterRule(_localctx, 14, RULE_enumName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumValuePairContext enumValuePair() {
			return GetRuleContext<EnumValuePairContext>(0);
		}
		public EnumDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterEnumData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitEnumData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDataContext enumData() {
		EnumDataContext _localctx = new EnumDataContext(Context, State);
		EnterRule(_localctx, 16, RULE_enumData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			enumValuePair();
			State = 175;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValuePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAttributesContext typeAttributes() {
			return GetRuleContext<TypeAttributesContext>(0);
		}
		public EnumValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValuePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterEnumValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitEnumValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValuePairContext enumValuePair() {
		EnumValuePairContext _localctx = new EnumValuePairContext(Context, State);
		EnterRule(_localctx, 18, RULE_enumValuePair);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 177;
				typeAttributes();
				}
			}

			State = 180;
			Match(UNQUOTED_STRING);
			State = 181;
			Match(T__8);
			State = 182;
			numeral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeNameContext classTypeName() {
			return GetRuleContext<ClassTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAttributesContext typeAttributes() {
			return GetRuleContext<TypeAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassAttributesContext classAttributes() {
			return GetRuleContext<ClassAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInherritsContext classInherrits() {
			return GetRuleContext<ClassInherritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseClassVariableContext[] baseClassVariable() {
			return GetRuleContexts<BaseClassVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseClassVariableContext baseClassVariable(int i) {
			return GetRuleContext<BaseClassVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureDataContext[] structureData() {
			return GetRuleContexts<StructureDataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureDataContext structureData(int i) {
			return GetRuleContext<StructureDataContext>(i);
		}
		public TypeClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeClassContext typeClass() {
		TypeClassContext _localctx = new TypeClassContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 184;
				typeAttributes();
				}
			}

			State = 187;
			Match(T__9);
			State = 189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 188;
				classAttributes();
				}
				break;
			}
			State = 191;
			classTypeName();
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 192;
				classInherrits();
				}
			}

			State = 195;
			Match(T__6);
			State = 199;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 196;
					baseClassVariable();
					}
					} 
				}
				State = 201;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 275079233536L) != 0)) {
				{
				{
				State = 202;
				structureData();
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 208;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public ClassTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterClassTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitClassTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeNameContext classTypeName() {
		ClassTypeNameContext _localctx = new ClassTypeNameContext(Context, State);
		EnterRule(_localctx, 22, RULE_classTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInherritsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassInherritContext[] classInherrit() {
			return GetRuleContexts<ClassInherritContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInherritContext classInherrit(int i) {
			return GetRuleContext<ClassInherritContext>(i);
		}
		public ClassInherritsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInherrits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterClassInherrits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitClassInherrits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInherrits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInherritsContext classInherrits() {
		ClassInherritsContext _localctx = new ClassInherritsContext(Context, State);
		EnterRule(_localctx, 24, RULE_classInherrits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(T__10);
			State = 213;
			classInherrit();
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 214;
				Match(T__11);
				State = 215;
				classInherrit();
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInherritContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public ClassInherritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInherrit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterClassInherrit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitClassInherrit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInherrit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInherritContext classInherrit() {
		ClassInherritContext _localctx = new ClassInherritContext(Context, State);
		EnterRule(_localctx, 26, RULE_classInherrit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeNameContext arrayTypeName() {
			return GetRuleContext<ArrayTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAttributesContext typeAttributes() {
			return GetRuleContext<TypeAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassAttributesContext classAttributes() {
			return GetRuleContext<ClassAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayRefContext arrayRef() {
			return GetRuleContext<ArrayRefContext>(0);
		}
		public TypeArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArrayContext typeArray() {
		TypeArrayContext _localctx = new TypeArrayContext(Context, State);
		EnterRule(_localctx, 28, RULE_typeArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 223;
				typeAttributes();
				}
			}

			State = 226;
			Match(T__12);
			State = 228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 227;
				classAttributes();
				}
				break;
			}
			State = 230;
			arrayTypeName();
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 231;
				arrayRef();
				}
			}

			State = 234;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public ArrayTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterArrayTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitArrayTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeNameContext arrayTypeName() {
		ArrayTypeNameContext _localctx = new ArrayTypeNameContext(Context, State);
		EnterRule(_localctx, 30, RULE_arrayTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayRefNameContext arrayRefName() {
			return GetRuleContext<ArrayRefNameContext>(0);
		}
		public ArrayRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterArrayRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitArrayRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayRefContext arrayRef() {
		ArrayRefContext _localctx = new ArrayRefContext(Context, State);
		EnterRule(_localctx, 32, RULE_arrayRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(T__13);
			State = 239;
			arrayRefName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayRefNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public ArrayRefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayRefName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterArrayRefName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitArrayRefName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayRefName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayRefNameContext arrayRefName() {
		ArrayRefNameContext _localctx = new ArrayRefNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_arrayRefName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDelegateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeNameContext classTypeName() {
			return GetRuleContext<ClassTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAttributesContext typeAttributes() {
			return GetRuleContext<TypeAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassAttributesContext classAttributes() {
			return GetRuleContext<ClassAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDataContext[] functionData() {
			return GetRuleContexts<FunctionDataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDataContext functionData(int i) {
			return GetRuleContext<FunctionDataContext>(i);
		}
		public TypeDelegateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDelegate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeDelegate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeDelegate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDelegate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDelegateContext typeDelegate() {
		TypeDelegateContext _localctx = new TypeDelegateContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeDelegate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 243;
				typeAttributes();
				}
			}

			State = 246;
			Match(T__14);
			State = 248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 247;
				classAttributes();
				}
				break;
			}
			State = 250;
			classTypeName();
			State = 251;
			Match(T__6);
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4063232L) != 0)) {
				{
				{
				State = 252;
				functionData();
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 258;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeNameContext classTypeName() {
			return GetRuleContext<ClassTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAttributesContext typeAttributes() {
			return GetRuleContext<TypeAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassAttributesContext classAttributes() {
			return GetRuleContext<ClassAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDataContext[] functionData() {
			return GetRuleContexts<FunctionDataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDataContext functionData(int i) {
			return GetRuleContext<FunctionDataContext>(i);
		}
		public TypeFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeFunctionContext typeFunction() {
		TypeFunctionContext _localctx = new TypeFunctionContext(Context, State);
		EnterRule(_localctx, 38, RULE_typeFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 260;
				typeAttributes();
				}
			}

			State = 263;
			Match(T__15);
			State = 265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 264;
				classAttributes();
				}
				break;
			}
			State = 267;
			classTypeName();
			State = 268;
			Match(T__6);
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4063232L) != 0)) {
				{
				{
				State = 269;
				functionData();
				}
				}
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 275;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParamDataContext functionParamData() {
			return GetRuleContext<FunctionParamDataContext>(0);
		}
		public FunctionDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterFunctionData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitFunctionData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDataContext functionData() {
		FunctionDataContext _localctx = new FunctionDataContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			functionParamData();
			State = 278;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParamDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParamTypeContext functionParamType() {
			return GetRuleContext<FunctionParamTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParamTypeNameContext functionParamTypeName() {
			return GetRuleContext<FunctionParamTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParamNameContext functionParamName() {
			return GetRuleContext<FunctionParamNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberValueContext memberValue() {
			return GetRuleContext<MemberValueContext>(0);
		}
		public FunctionParamDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParamData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterFunctionParamData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitFunctionParamData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParamData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParamDataContext functionParamData() {
		FunctionParamDataContext _localctx = new FunctionParamDataContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionParamData);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			functionParamType();
			State = 281;
			functionParamTypeName();
			State = 282;
			functionParamName();
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 283;
				Match(T__8);
				State = 284;
				memberValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParamTypeContext : ParserRuleContext {
		public FunctionParamTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParamType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterFunctionParamType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitFunctionParamType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParamType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParamTypeContext functionParamType() {
		FunctionParamTypeContext _localctx = new FunctionParamTypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionParamType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4063232L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParamTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public FunctionParamTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParamTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterFunctionParamTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitFunctionParamTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParamTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParamTypeNameContext functionParamTypeName() {
		FunctionParamTypeNameContext _localctx = new FunctionParamTypeNameContext(Context, State);
		EnterRule(_localctx, 46, RULE_functionParamTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParamNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public FunctionParamNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParamName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterFunctionParamName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitFunctionParamName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParamName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParamNameContext functionParamName() {
		FunctionParamNameContext _localctx = new FunctionParamNameContext(Context, State);
		EnterRule(_localctx, 48, RULE_functionParamName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInterfaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeNameContext classTypeName() {
			return GetRuleContext<ClassTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAttributesContext typeAttributes() {
			return GetRuleContext<TypeAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassAttributesContext classAttributes() {
			return GetRuleContext<ClassAttributesContext>(0);
		}
		public TypeInterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInterface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInterface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInterfaceContext typeInterface() {
		TypeInterfaceContext _localctx = new TypeInterfaceContext(Context, State);
		EnterRule(_localctx, 50, RULE_typeInterface);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 293;
				typeAttributes();
				}
			}

			State = 296;
			Match(T__21);
			State = 298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 297;
				classAttributes();
				}
				break;
			}
			State = 300;
			classTypeName();
			State = 301;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeValueTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueTypeIdentifierContext valueTypeIdentifier() {
			return GetRuleContext<ValueTypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueTypeNameContext valueTypeName() {
			return GetRuleContext<ValueTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAttributesContext typeAttributes() {
			return GetRuleContext<TypeAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassAttributesContext classAttributes() {
			return GetRuleContext<ClassAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseClassVariableContext[] baseClassVariable() {
			return GetRuleContexts<BaseClassVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseClassVariableContext baseClassVariable(int i) {
			return GetRuleContext<BaseClassVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureDataContext[] structureData() {
			return GetRuleContexts<StructureDataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureDataContext structureData(int i) {
			return GetRuleContext<StructureDataContext>(i);
		}
		public TypeValueTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeValueType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeValueType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeValueType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeValueType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeValueTypeContext typeValueType() {
		TypeValueTypeContext _localctx = new TypeValueTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_typeValueType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 303;
				typeAttributes();
				}
			}

			State = 306;
			valueTypeIdentifier();
			State = 308;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 307;
				classAttributes();
				}
				break;
			}
			State = 310;
			valueTypeName();
			State = 311;
			Match(T__6);
			State = 315;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 312;
					baseClassVariable();
					}
					} 
				}
				State = 317;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 275079233536L) != 0)) {
				{
				{
				State = 318;
				structureData();
				}
				}
				State = 323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 324;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueTypeIdentifierContext : ParserRuleContext {
		public ValueTypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueTypeIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterValueTypeIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitValueTypeIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTypeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypeIdentifierContext valueTypeIdentifier() {
		ValueTypeIdentifierContext _localctx = new ValueTypeIdentifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_valueTypeIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			_la = TokenStream.LA(1);
			if ( !(_la==T__22 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public ValueTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterValueTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitValueTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypeNameContext valueTypeName() {
		ValueTypeNameContext _localctx = new ValueTypeNameContext(Context, State);
		EnterRule(_localctx, 56, RULE_valueTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseClassVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseClassNameContext baseClassName() {
			return GetRuleContext<BaseClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseFieldNameContext baseFieldName() {
			return GetRuleContext<BaseFieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberValueContext memberValue() {
			return GetRuleContext<MemberValueContext>(0);
		}
		public BaseClassVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseClassVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterBaseClassVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitBaseClassVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseClassVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseClassVariableContext baseClassVariable() {
		BaseClassVariableContext _localctx = new BaseClassVariableContext(Context, State);
		EnterRule(_localctx, 58, RULE_baseClassVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			baseClassName();
			State = 331;
			Match(T__24);
			State = 332;
			baseFieldName();
			State = 333;
			Match(T__8);
			State = 334;
			memberValue();
			State = 335;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public BaseClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseClassName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterBaseClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitBaseClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseClassNameContext baseClassName() {
		BaseClassNameContext _localctx = new BaseClassNameContext(Context, State);
		EnterRule(_localctx, 60, RULE_baseClassName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseFieldNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public BaseFieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseFieldName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterBaseFieldName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitBaseFieldName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseFieldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseFieldNameContext baseFieldName() {
		BaseFieldNameContext _localctx = new BaseFieldNameContext(Context, State);
		EnterRule(_localctx, 62, RULE_baseFieldName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberDataContext memberData() {
			return GetRuleContext<MemberDataContext>(0);
		}
		public StructureDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterStructureData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitStructureData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureDataContext structureData() {
		StructureDataContext _localctx = new StructureDataContext(Context, State);
		EnterRule(_localctx, 64, RULE_structureData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			memberData();
			State = 342;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberTypeNameContext memberTypeName() {
			return GetRuleContext<MemberTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberOffsetContext memberOffset() {
			return GetRuleContext<MemberOffsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAttributesContext typeAttributes() {
			return GetRuleContext<TypeAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberVisibilityContext memberVisibility() {
			return GetRuleContext<MemberVisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberArrayTypeContext memberArrayType() {
			return GetRuleContext<MemberArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDefaultValueContext memberDefaultValue() {
			return GetRuleContext<MemberDefaultValueContext>(0);
		}
		public MemberDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDataContext memberData() {
		MemberDataContext _localctx = new MemberDataContext(Context, State);
		EnterRule(_localctx, 66, RULE_memberData);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 344;
				typeAttributes();
				}
			}

			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25) {
				{
				State = 347;
				memberVisibility();
				}
			}

			State = 350;
			memberTypeName();
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 351;
				memberArrayType();
				}
			}

			State = 354;
			memberName();
			State = 355;
			Match(T__10);
			State = 356;
			memberOffset();
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 357;
				memberDefaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberVisibilityContext : ParserRuleContext {
		public MemberVisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberVisibility; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberVisibilityContext memberVisibility() {
		MemberVisibilityContext _localctx = new MemberVisibilityContext(Context, State);
		EnterRule(_localctx, 68, RULE_memberVisibility);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			Match(T__25);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public MemberTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberTypeNameContext memberTypeName() {
		MemberTypeNameContext _localctx = new MemberTypeNameContext(Context, State);
		EnterRule(_localctx, 70, RULE_memberTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		public MemberArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberArrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberArrayTypeContext memberArrayType() {
		MemberArrayTypeContext _localctx = new MemberArrayTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_memberArrayType);
		try {
			State = 370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364;
				Match(T__26);
				State = 365;
				Match(T__27);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 366;
				Match(T__26);
				State = 367;
				numeral();
				State = 368;
				Match(T__27);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public MemberNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberNameContext memberName() {
		MemberNameContext _localctx = new MemberNameContext(Context, State);
		EnterRule(_localctx, 74, RULE_memberName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberOffsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		public MemberOffsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberOffset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberOffset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberOffset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberOffset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberOffsetContext memberOffset() {
		MemberOffsetContext _localctx = new MemberOffsetContext(Context, State);
		EnterRule(_localctx, 76, RULE_memberOffset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			numeral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDefaultValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberValueContext memberValue() {
			return GetRuleContext<MemberValueContext>(0);
		}
		public MemberDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDefaultValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberDefaultValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberDefaultValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDefaultValueContext memberDefaultValue() {
		MemberDefaultValueContext _localctx = new MemberDefaultValueContext(Context, State);
		EnterRule(_localctx, 78, RULE_memberDefaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(T__8);
			State = 377;
			memberValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberValueContext : ParserRuleContext {
		public MemberValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberValue; } }
	 
		public MemberValueContext() { }
		public virtual void CopyFrom(MemberValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MemberValueInstanceContext : MemberValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberInstanceFieldContext[] memberInstanceField() {
			return GetRuleContexts<MemberInstanceFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberInstanceFieldContext memberInstanceField(int i) {
			return GetRuleContext<MemberInstanceFieldContext>(i);
		}
		public MemberValueInstanceContext(MemberValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberValueInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberValueInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberValueInstance(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberValueArrayContext : MemberValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberArrayElementContext[] memberArrayElement() {
			return GetRuleContexts<MemberArrayElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberArrayElementContext memberArrayElement(int i) {
			return GetRuleContext<MemberArrayElementContext>(i);
		}
		public MemberValueArrayContext(MemberValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberValueArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberValueArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberValueArray(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberValueNumberContext : MemberValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		public MemberValueNumberContext(MemberValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberValueNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberValueNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberValueNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberValueFloatContext : MemberValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		public MemberValueFloatContext(MemberValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberValueFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberValueFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberValueFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberValueNullContext : MemberValueContext {
		public MemberValueNullContext(MemberValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberValueNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberValueNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberValueNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberValueStringContext : MemberValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_STRING() { return GetToken(FBTParser.QUOTED_STRING, 0); }
		public MemberValueStringContext(MemberValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberValueString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberValueString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberValueString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberValueContext memberValue() {
		MemberValueContext _localctx = new MemberValueContext(Context, State);
		EnterRule(_localctx, 80, RULE_memberValue);
		int _la;
		try {
			State = 399;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				_localctx = new MemberValueInstanceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 379;
				Match(T__6);
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==UNQUOTED_STRING) {
					{
					{
					State = 380;
					memberInstanceField();
					}
					}
					State = 385;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 386;
				Match(T__7);
				}
				break;
			case T__26:
				_localctx = new MemberValueArrayContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 387;
				Match(T__26);
				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 249779191936L) != 0)) {
					{
					{
					State = 388;
					memberArrayElement();
					}
					}
					State = 393;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 394;
				Match(T__27);
				}
				break;
			case HEX:
			case NUMBER:
				_localctx = new MemberValueNumberContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 395;
				numeral();
				}
				break;
			case FLOAT:
				_localctx = new MemberValueFloatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 396;
				@float();
				}
				break;
			case QUOTED_STRING:
				_localctx = new MemberValueStringContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 397;
				Match(QUOTED_STRING);
				}
				break;
			case T__28:
				_localctx = new MemberValueNullContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 398;
				Match(T__28);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberInstanceFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberValueContext memberValue() {
			return GetRuleContext<MemberValueContext>(0);
		}
		public MemberInstanceFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberInstanceField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberInstanceField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberInstanceField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberInstanceField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberInstanceFieldContext memberInstanceField() {
		MemberInstanceFieldContext _localctx = new MemberInstanceFieldContext(Context, State);
		EnterRule(_localctx, 82, RULE_memberInstanceField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(UNQUOTED_STRING);
			State = 402;
			Match(T__8);
			State = 403;
			memberValue();
			State = 404;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberArrayElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberValueContext memberValue() {
			return GetRuleContext<MemberValueContext>(0);
		}
		public MemberArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberArrayElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberArrayElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberArrayElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberArrayElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberArrayElementContext memberArrayElement() {
		MemberArrayElementContext _localctx = new MemberArrayElementContext(Context, State);
		EnterRule(_localctx, 84, RULE_memberArrayElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			memberValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePrimitiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeNameContext primitiveTypeName() {
			return GetRuleContext<PrimitiveTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAttributesContext typeAttributes() {
			return GetRuleContext<TypeAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassAttributesContext classAttributes() {
			return GetRuleContext<ClassAttributesContext>(0);
		}
		public TypePrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePrimitive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypePrimitive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypePrimitive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypePrimitive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypePrimitiveContext typePrimitive() {
		TypePrimitiveContext _localctx = new TypePrimitiveContext(Context, State);
		EnterRule(_localctx, 86, RULE_typePrimitive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 408;
				typeAttributes();
				}
			}

			State = 411;
			Match(T__29);
			State = 413;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 412;
				classAttributes();
				}
				break;
			}
			State = 415;
			primitiveTypeName();
			State = 416;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public PrimitiveTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterPrimitiveTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitPrimitiveTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeNameContext primitiveTypeName() {
		PrimitiveTypeNameContext _localctx = new PrimitiveTypeNameContext(Context, State);
		EnterRule(_localctx, 88, RULE_primitiveTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeAttributeContext[] typeAttribute() {
			return GetRuleContexts<TypeAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAttributeContext typeAttribute(int i) {
			return GetRuleContext<TypeAttributeContext>(i);
		}
		public ClassAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAttributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterClassAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitClassAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAttributesContext classAttributes() {
		ClassAttributesContext _localctx = new ClassAttributesContext(Context, State);
		EnterRule(_localctx, 90, RULE_classAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			typeAttribute();
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 421;
				Match(T__11);
				State = 422;
				typeAttribute();
				}
				}
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeAttributesDataContext[] typeAttributesData() {
			return GetRuleContexts<TypeAttributesDataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAttributesDataContext typeAttributesData(int i) {
			return GetRuleContext<TypeAttributesDataContext>(i);
		}
		public TypeAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAttributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAttributesContext typeAttributes() {
		TypeAttributesContext _localctx = new TypeAttributesContext(Context, State);
		EnterRule(_localctx, 92, RULE_typeAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 428;
				typeAttributesData();
				}
				}
				State = 431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__26 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAttributesDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeAttributeContext[] typeAttribute() {
			return GetRuleContexts<TypeAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAttributeContext typeAttribute(int i) {
			return GetRuleContext<TypeAttributeContext>(i);
		}
		public TypeAttributesDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAttributesData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeAttributesData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeAttributesData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAttributesData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAttributesDataContext typeAttributesData() {
		TypeAttributesDataContext _localctx = new TypeAttributesDataContext(Context, State);
		EnterRule(_localctx, 94, RULE_typeAttributesData);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			Match(T__26);
			State = 442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNQUOTED_STRING) {
				{
				State = 434;
				typeAttribute();
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__11) {
					{
					{
					State = 435;
					Match(T__11);
					State = 436;
					typeAttribute();
					}
					}
					State = 441;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 444;
			Match(T__27);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumeralTypeAttributeContext numeralTypeAttribute() {
			return GetRuleContext<NumeralTypeAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeAttributeContext stringTypeAttribute() {
			return GetRuleContext<StringTypeAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicTypeAttributeContext basicTypeAttribute() {
			return GetRuleContext<BasicTypeAttributeContext>(0);
		}
		public TypeAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAttributeContext typeAttribute() {
		TypeAttributeContext _localctx = new TypeAttributeContext(Context, State);
		EnterRule(_localctx, 96, RULE_typeAttribute);
		try {
			State = 449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 446;
				numeralTypeAttribute();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 447;
				stringTypeAttribute();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 448;
				basicTypeAttribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicTypeAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public BasicTypeAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicTypeAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterBasicTypeAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitBasicTypeAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicTypeAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicTypeAttributeContext basicTypeAttribute() {
		BasicTypeAttributeContext _localctx = new BasicTypeAttributeContext(Context, State);
		EnterRule(_localctx, 98, RULE_basicTypeAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumeralTypeAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		public NumeralTypeAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeralTypeAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterNumeralTypeAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitNumeralTypeAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeralTypeAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumeralTypeAttributeContext numeralTypeAttribute() {
		NumeralTypeAttributeContext _localctx = new NumeralTypeAttributeContext(Context, State);
		EnterRule(_localctx, 100, RULE_numeralTypeAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			Match(UNQUOTED_STRING);
			State = 454;
			Match(T__30);
			State = 455;
			numeral();
			State = 456;
			Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_STRING() { return GetToken(FBTParser.QUOTED_STRING, 0); }
		public StringTypeAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringTypeAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterStringTypeAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitStringTypeAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTypeAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTypeAttributeContext stringTypeAttribute() {
		StringTypeAttributeContext _localctx = new StringTypeAttributeContext(Context, State);
		EnterRule(_localctx, 102, RULE_stringTypeAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			Match(UNQUOTED_STRING);
			State = 459;
			Match(T__30);
			State = 460;
			Match(QUOTED_STRING);
			State = 461;
			Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumeralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(FBTParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(FBTParser.HEX, 0); }
		public NumeralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterNumeral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitNumeral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumeralContext numeral() {
		NumeralContext _localctx = new NumeralContext(Context, State);
		EnterRule(_localctx, 104, RULE_numeral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			_la = TokenStream.LA(1);
			if ( !(_la==HEX || _la==NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(FBTParser.FLOAT, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 106, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,40,468,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,5,0,111,8,0,10,0,12,0,
		114,9,0,1,0,4,0,117,8,0,11,0,12,0,118,1,0,1,0,3,0,123,8,0,1,1,5,1,126,
		8,1,10,1,12,1,129,9,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,3,3,146,8,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,3,6,157,8,
		6,1,6,1,6,3,6,161,8,6,1,6,1,6,1,6,5,6,166,8,6,10,6,12,6,169,9,6,1,6,1,
		6,1,7,1,7,1,8,1,8,1,8,1,9,3,9,179,8,9,1,9,1,9,1,9,1,9,1,10,3,10,186,8,
		10,1,10,1,10,3,10,190,8,10,1,10,1,10,3,10,194,8,10,1,10,1,10,5,10,198,
		8,10,10,10,12,10,201,9,10,1,10,5,10,204,8,10,10,10,12,10,207,9,10,1,10,
		1,10,1,11,1,11,1,12,1,12,1,12,1,12,5,12,217,8,12,10,12,12,12,220,9,12,
		1,13,1,13,1,14,3,14,225,8,14,1,14,1,14,3,14,229,8,14,1,14,1,14,3,14,233,
		8,14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,3,18,245,8,18,1,
		18,1,18,3,18,249,8,18,1,18,1,18,1,18,5,18,254,8,18,10,18,12,18,257,9,18,
		1,18,1,18,1,19,3,19,262,8,19,1,19,1,19,3,19,266,8,19,1,19,1,19,1,19,5,
		19,271,8,19,10,19,12,19,274,9,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,
		21,1,21,1,21,3,21,286,8,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,3,25,295,
		8,25,1,25,1,25,3,25,299,8,25,1,25,1,25,1,25,1,26,3,26,305,8,26,1,26,1,
		26,3,26,309,8,26,1,26,1,26,1,26,5,26,314,8,26,10,26,12,26,317,9,26,1,26,
		5,26,320,8,26,10,26,12,26,323,9,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,
		1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,
		3,33,346,8,33,1,33,3,33,349,8,33,1,33,1,33,3,33,353,8,33,1,33,1,33,1,33,
		1,33,3,33,359,8,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,3,
		36,371,8,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,5,40,382,8,40,
		10,40,12,40,385,9,40,1,40,1,40,1,40,5,40,390,8,40,10,40,12,40,393,9,40,
		1,40,1,40,1,40,1,40,1,40,3,40,400,8,40,1,41,1,41,1,41,1,41,1,41,1,42,1,
		42,1,43,3,43,410,8,43,1,43,1,43,3,43,414,8,43,1,43,1,43,1,43,1,44,1,44,
		1,45,1,45,1,45,5,45,424,8,45,10,45,12,45,427,9,45,1,46,4,46,430,8,46,11,
		46,12,46,431,1,47,1,47,1,47,1,47,5,47,438,8,47,10,47,12,47,441,9,47,3,
		47,443,8,47,1,47,1,47,1,48,1,48,1,48,3,48,450,8,48,1,49,1,49,1,50,1,50,
		1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,53,1,53,1,53,0,0,54,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
		98,100,102,104,106,0,3,1,0,17,21,1,0,23,24,1,0,35,36,473,0,122,1,0,0,0,
		2,127,1,0,0,0,4,130,1,0,0,0,6,145,1,0,0,0,8,147,1,0,0,0,10,151,1,0,0,0,
		12,156,1,0,0,0,14,172,1,0,0,0,16,174,1,0,0,0,18,178,1,0,0,0,20,185,1,0,
		0,0,22,210,1,0,0,0,24,212,1,0,0,0,26,221,1,0,0,0,28,224,1,0,0,0,30,236,
		1,0,0,0,32,238,1,0,0,0,34,241,1,0,0,0,36,244,1,0,0,0,38,261,1,0,0,0,40,
		277,1,0,0,0,42,280,1,0,0,0,44,287,1,0,0,0,46,289,1,0,0,0,48,291,1,0,0,
		0,50,294,1,0,0,0,52,304,1,0,0,0,54,326,1,0,0,0,56,328,1,0,0,0,58,330,1,
		0,0,0,60,337,1,0,0,0,62,339,1,0,0,0,64,341,1,0,0,0,66,345,1,0,0,0,68,360,
		1,0,0,0,70,362,1,0,0,0,72,370,1,0,0,0,74,372,1,0,0,0,76,374,1,0,0,0,78,
		376,1,0,0,0,80,399,1,0,0,0,82,401,1,0,0,0,84,406,1,0,0,0,86,409,1,0,0,
		0,88,418,1,0,0,0,90,420,1,0,0,0,92,429,1,0,0,0,94,433,1,0,0,0,96,449,1,
		0,0,0,98,451,1,0,0,0,100,453,1,0,0,0,102,458,1,0,0,0,104,463,1,0,0,0,106,
		465,1,0,0,0,108,112,3,2,1,0,109,111,3,6,3,0,110,109,1,0,0,0,111,114,1,
		0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,123,1,0,0,0,114,112,1,0,0,0,
		115,117,3,6,3,0,116,115,1,0,0,0,117,118,1,0,0,0,118,116,1,0,0,0,118,119,
		1,0,0,0,119,120,1,0,0,0,120,121,5,0,0,1,121,123,1,0,0,0,122,108,1,0,0,
		0,122,116,1,0,0,0,123,1,1,0,0,0,124,126,3,4,2,0,125,124,1,0,0,0,126,129,
		1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,3,1,0,0,0,129,127,1,0,0,0,
		130,131,5,1,0,0,131,132,5,2,0,0,132,133,5,34,0,0,133,5,1,0,0,0,134,146,
		3,8,4,0,135,146,3,10,5,0,136,146,3,20,10,0,137,146,3,12,6,0,138,146,3,
		52,26,0,139,146,3,28,14,0,140,146,3,50,25,0,141,146,3,38,19,0,142,146,
		3,36,18,0,143,146,3,50,25,0,144,146,3,86,43,0,145,134,1,0,0,0,145,135,
		1,0,0,0,145,136,1,0,0,0,145,137,1,0,0,0,145,138,1,0,0,0,145,139,1,0,0,
		0,145,140,1,0,0,0,145,141,1,0,0,0,145,142,1,0,0,0,145,143,1,0,0,0,145,
		144,1,0,0,0,146,7,1,0,0,0,147,148,5,3,0,0,148,149,5,38,0,0,149,150,5,4,
		0,0,150,9,1,0,0,0,151,152,5,5,0,0,152,153,5,38,0,0,153,154,5,4,0,0,154,
		11,1,0,0,0,155,157,3,92,46,0,156,155,1,0,0,0,156,157,1,0,0,0,157,158,1,
		0,0,0,158,160,5,6,0,0,159,161,3,90,45,0,160,159,1,0,0,0,160,161,1,0,0,
		0,161,162,1,0,0,0,162,163,3,14,7,0,163,167,5,7,0,0,164,166,3,16,8,0,165,
		164,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,170,1,
		0,0,0,169,167,1,0,0,0,170,171,5,8,0,0,171,13,1,0,0,0,172,173,5,38,0,0,
		173,15,1,0,0,0,174,175,3,18,9,0,175,176,5,4,0,0,176,17,1,0,0,0,177,179,
		3,92,46,0,178,177,1,0,0,0,178,179,1,0,0,0,179,180,1,0,0,0,180,181,5,38,
		0,0,181,182,5,9,0,0,182,183,3,104,52,0,183,19,1,0,0,0,184,186,3,92,46,
		0,185,184,1,0,0,0,185,186,1,0,0,0,186,187,1,0,0,0,187,189,5,10,0,0,188,
		190,3,90,45,0,189,188,1,0,0,0,189,190,1,0,0,0,190,191,1,0,0,0,191,193,
		3,22,11,0,192,194,3,24,12,0,193,192,1,0,0,0,193,194,1,0,0,0,194,195,1,
		0,0,0,195,199,5,7,0,0,196,198,3,58,29,0,197,196,1,0,0,0,198,201,1,0,0,
		0,199,197,1,0,0,0,199,200,1,0,0,0,200,205,1,0,0,0,201,199,1,0,0,0,202,
		204,3,64,32,0,203,202,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,
		1,0,0,0,206,208,1,0,0,0,207,205,1,0,0,0,208,209,5,8,0,0,209,21,1,0,0,0,
		210,211,5,38,0,0,211,23,1,0,0,0,212,213,5,11,0,0,213,218,3,26,13,0,214,
		215,5,12,0,0,215,217,3,26,13,0,216,214,1,0,0,0,217,220,1,0,0,0,218,216,
		1,0,0,0,218,219,1,0,0,0,219,25,1,0,0,0,220,218,1,0,0,0,221,222,5,38,0,
		0,222,27,1,0,0,0,223,225,3,92,46,0,224,223,1,0,0,0,224,225,1,0,0,0,225,
		226,1,0,0,0,226,228,5,13,0,0,227,229,3,90,45,0,228,227,1,0,0,0,228,229,
		1,0,0,0,229,230,1,0,0,0,230,232,3,30,15,0,231,233,3,32,16,0,232,231,1,
		0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,235,5,4,0,0,235,29,1,0,0,0,236,
		237,5,38,0,0,237,31,1,0,0,0,238,239,5,14,0,0,239,240,3,34,17,0,240,33,
		1,0,0,0,241,242,5,38,0,0,242,35,1,0,0,0,243,245,3,92,46,0,244,243,1,0,
		0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,248,5,15,0,0,247,249,3,90,45,0,
		248,247,1,0,0,0,248,249,1,0,0,0,249,250,1,0,0,0,250,251,3,22,11,0,251,
		255,5,7,0,0,252,254,3,40,20,0,253,252,1,0,0,0,254,257,1,0,0,0,255,253,
		1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,0,257,255,1,0,0,0,258,259,5,8,0,
		0,259,37,1,0,0,0,260,262,3,92,46,0,261,260,1,0,0,0,261,262,1,0,0,0,262,
		263,1,0,0,0,263,265,5,16,0,0,264,266,3,90,45,0,265,264,1,0,0,0,265,266,
		1,0,0,0,266,267,1,0,0,0,267,268,3,22,11,0,268,272,5,7,0,0,269,271,3,40,
		20,0,270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,
		275,1,0,0,0,274,272,1,0,0,0,275,276,5,8,0,0,276,39,1,0,0,0,277,278,3,42,
		21,0,278,279,5,4,0,0,279,41,1,0,0,0,280,281,3,44,22,0,281,282,3,46,23,
		0,282,285,3,48,24,0,283,284,5,9,0,0,284,286,3,80,40,0,285,283,1,0,0,0,
		285,286,1,0,0,0,286,43,1,0,0,0,287,288,7,0,0,0,288,45,1,0,0,0,289,290,
		5,38,0,0,290,47,1,0,0,0,291,292,5,38,0,0,292,49,1,0,0,0,293,295,3,92,46,
		0,294,293,1,0,0,0,294,295,1,0,0,0,295,296,1,0,0,0,296,298,5,22,0,0,297,
		299,3,90,45,0,298,297,1,0,0,0,298,299,1,0,0,0,299,300,1,0,0,0,300,301,
		3,22,11,0,301,302,5,4,0,0,302,51,1,0,0,0,303,305,3,92,46,0,304,303,1,0,
		0,0,304,305,1,0,0,0,305,306,1,0,0,0,306,308,3,54,27,0,307,309,3,90,45,
		0,308,307,1,0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,310,311,3,56,28,0,311,
		315,5,7,0,0,312,314,3,58,29,0,313,312,1,0,0,0,314,317,1,0,0,0,315,313,
		1,0,0,0,315,316,1,0,0,0,316,321,1,0,0,0,317,315,1,0,0,0,318,320,3,64,32,
		0,319,318,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,
		324,1,0,0,0,323,321,1,0,0,0,324,325,5,8,0,0,325,53,1,0,0,0,326,327,7,1,
		0,0,327,55,1,0,0,0,328,329,5,38,0,0,329,57,1,0,0,0,330,331,3,60,30,0,331,
		332,5,25,0,0,332,333,3,62,31,0,333,334,5,9,0,0,334,335,3,80,40,0,335,336,
		5,4,0,0,336,59,1,0,0,0,337,338,5,38,0,0,338,61,1,0,0,0,339,340,5,38,0,
		0,340,63,1,0,0,0,341,342,3,66,33,0,342,343,5,4,0,0,343,65,1,0,0,0,344,
		346,3,92,46,0,345,344,1,0,0,0,345,346,1,0,0,0,346,348,1,0,0,0,347,349,
		3,68,34,0,348,347,1,0,0,0,348,349,1,0,0,0,349,350,1,0,0,0,350,352,3,70,
		35,0,351,353,3,72,36,0,352,351,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,
		354,355,3,74,37,0,355,356,5,11,0,0,356,358,3,76,38,0,357,359,3,78,39,0,
		358,357,1,0,0,0,358,359,1,0,0,0,359,67,1,0,0,0,360,361,5,26,0,0,361,69,
		1,0,0,0,362,363,5,38,0,0,363,71,1,0,0,0,364,365,5,27,0,0,365,371,5,28,
		0,0,366,367,5,27,0,0,367,368,3,104,52,0,368,369,5,28,0,0,369,371,1,0,0,
		0,370,364,1,0,0,0,370,366,1,0,0,0,371,73,1,0,0,0,372,373,5,38,0,0,373,
		75,1,0,0,0,374,375,3,104,52,0,375,77,1,0,0,0,376,377,5,9,0,0,377,378,3,
		80,40,0,378,79,1,0,0,0,379,383,5,7,0,0,380,382,3,82,41,0,381,380,1,0,0,
		0,382,385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,386,1,0,0,0,385,
		383,1,0,0,0,386,400,5,8,0,0,387,391,5,27,0,0,388,390,3,84,42,0,389,388,
		1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,
		0,393,391,1,0,0,0,394,400,5,28,0,0,395,400,3,104,52,0,396,400,3,106,53,
		0,397,400,5,33,0,0,398,400,5,29,0,0,399,379,1,0,0,0,399,387,1,0,0,0,399,
		395,1,0,0,0,399,396,1,0,0,0,399,397,1,0,0,0,399,398,1,0,0,0,400,81,1,0,
		0,0,401,402,5,38,0,0,402,403,5,9,0,0,403,404,3,80,40,0,404,405,5,12,0,
		0,405,83,1,0,0,0,406,407,3,80,40,0,407,85,1,0,0,0,408,410,3,92,46,0,409,
		408,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,413,5,30,0,0,412,414,3,
		90,45,0,413,412,1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,416,3,88,44,
		0,416,417,5,4,0,0,417,87,1,0,0,0,418,419,5,38,0,0,419,89,1,0,0,0,420,425,
		3,96,48,0,421,422,5,12,0,0,422,424,3,96,48,0,423,421,1,0,0,0,424,427,1,
		0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,91,1,0,0,0,427,425,1,0,0,0,428,
		430,3,94,47,0,429,428,1,0,0,0,430,431,1,0,0,0,431,429,1,0,0,0,431,432,
		1,0,0,0,432,93,1,0,0,0,433,442,5,27,0,0,434,439,3,96,48,0,435,436,5,12,
		0,0,436,438,3,96,48,0,437,435,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,
		439,440,1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,0,442,434,1,0,0,0,442,443,
		1,0,0,0,443,444,1,0,0,0,444,445,5,28,0,0,445,95,1,0,0,0,446,450,3,100,
		50,0,447,450,3,102,51,0,448,450,3,98,49,0,449,446,1,0,0,0,449,447,1,0,
		0,0,449,448,1,0,0,0,450,97,1,0,0,0,451,452,5,38,0,0,452,99,1,0,0,0,453,
		454,5,38,0,0,454,455,5,31,0,0,455,456,3,104,52,0,456,457,5,32,0,0,457,
		101,1,0,0,0,458,459,5,38,0,0,459,460,5,31,0,0,460,461,5,33,0,0,461,462,
		5,32,0,0,462,103,1,0,0,0,463,464,7,2,0,0,464,105,1,0,0,0,465,466,5,37,
		0,0,466,107,1,0,0,0,46,112,118,122,127,145,156,160,167,178,185,189,193,
		199,205,218,224,228,232,244,248,255,261,265,272,285,294,298,304,308,315,
		321,345,348,352,358,370,383,391,399,409,413,425,431,439,442,449
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
