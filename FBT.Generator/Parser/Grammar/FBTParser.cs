//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from G:\Users\txt\Source\Repos\FBTC1\FBT.Generator\Parser\Grammar\FBT.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class FBTParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, NUMBER=21, FLOAT=22, UNQUOTED_STRING=23, 
		QUOTED_STRING=24, QUOTED_IMPORT=25, CommentDirective=26, WS=27, HEX=28;
	public const int
		RULE_frostbiteType = 0, RULE_includeBlock = 1, RULE_include = 2, RULE_typeData = 3, 
		RULE_typeNamespace = 4, RULE_typeModule = 5, RULE_classAttributes = 6, 
		RULE_typeAttributes = 7, RULE_typeAttribute = 8, RULE_basicTypeAttribute = 9, 
		RULE_numeralTypeAttribute = 10, RULE_typeEnum = 11, RULE_enumName = 12, 
		RULE_enumData = 13, RULE_enumValuePair = 14, RULE_typeClass = 15, RULE_classTypeName = 16, 
		RULE_classInherrits = 17, RULE_classInherrit = 18, RULE_typeValueType = 19, 
		RULE_valueTypeIdentifier = 20, RULE_valueTypeName = 21, RULE_structureData = 22, 
		RULE_memberData = 23, RULE_memberVisibility = 24, RULE_memberTypeName = 25, 
		RULE_memberArrayType = 26, RULE_memberName = 27, RULE_memberOffset = 28, 
		RULE_typePrimitive = 29, RULE_primitiveTypeName = 30, RULE_numeral = 31;
	public static readonly string[] ruleNames = {
		"frostbiteType", "includeBlock", "include", "typeData", "typeNamespace", 
		"typeModule", "classAttributes", "typeAttributes", "typeAttribute", "basicTypeAttribute", 
		"numeralTypeAttribute", "typeEnum", "enumName", "enumData", "enumValuePair", 
		"typeClass", "classTypeName", "classInherrits", "classInherrit", "typeValueType", 
		"valueTypeIdentifier", "valueTypeName", "structureData", "memberData", 
		"memberVisibility", "memberTypeName", "memberArrayType", "memberName", 
		"memberOffset", "typePrimitive", "primitiveTypeName", "numeral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'include'", "'namespace'", "';'", "'module'", "','", "'['", 
		"']'", "'('", "')'", "'enum'", "'{'", "'}'", "'='", "'class'", "':'", 
		"'valuetype'", "'struct'", "'public'", "'primitive'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "NUMBER", "FLOAT", 
		"UNQUOTED_STRING", "QUOTED_STRING", "QUOTED_IMPORT", "CommentDirective", 
		"WS", "HEX"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FBT.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FBTParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FBTParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FBTParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FrostbiteTypeContext : ParserRuleContext {
		public IncludeBlockContext includeBlock() {
			return GetRuleContext<IncludeBlockContext>(0);
		}
		public TypeDataContext[] typeData() {
			return GetRuleContexts<TypeDataContext>();
		}
		public TypeDataContext typeData(int i) {
			return GetRuleContext<TypeDataContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(FBTParser.Eof, 0); }
		public FrostbiteTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frostbiteType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterFrostbiteType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitFrostbiteType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrostbiteType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrostbiteTypeContext frostbiteType() {
		FrostbiteTypeContext _localctx = new FrostbiteTypeContext(Context, State);
		EnterRule(_localctx, 0, RULE_frostbiteType);
		int _la;
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; includeBlock();
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__4) | (1L << T__6) | (1L << T__10) | (1L << T__14) | (1L << T__16) | (1L << T__17))) != 0)) {
					{
					{
					State = 65; typeData();
					}
					}
					State = 70;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 71; typeData();
					}
					}
					State = 74;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__4) | (1L << T__6) | (1L << T__10) | (1L << T__14) | (1L << T__16) | (1L << T__17))) != 0) );
				State = 76; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeBlockContext : ParserRuleContext {
		public IncludeContext[] include() {
			return GetRuleContexts<IncludeContext>();
		}
		public IncludeContext include(int i) {
			return GetRuleContext<IncludeContext>(i);
		}
		public IncludeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterIncludeBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitIncludeBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeBlockContext includeBlock() {
		IncludeBlockContext _localctx = new IncludeBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_includeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 80; include();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		public ITerminalNode QUOTED_IMPORT() { return GetToken(FBTParser.QUOTED_IMPORT, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 4, RULE_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(T__0);
			State = 87; Match(T__1);
			State = 88; Match(QUOTED_IMPORT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDataContext : ParserRuleContext {
		public TypeNamespaceContext typeNamespace() {
			return GetRuleContext<TypeNamespaceContext>(0);
		}
		public TypeModuleContext typeModule() {
			return GetRuleContext<TypeModuleContext>(0);
		}
		public TypeClassContext typeClass() {
			return GetRuleContext<TypeClassContext>(0);
		}
		public TypeEnumContext typeEnum() {
			return GetRuleContext<TypeEnumContext>(0);
		}
		public TypeValueTypeContext typeValueType() {
			return GetRuleContext<TypeValueTypeContext>(0);
		}
		public TypePrimitiveContext typePrimitive() {
			return GetRuleContext<TypePrimitiveContext>(0);
		}
		public TypeDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeData; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDataContext typeData() {
		TypeDataContext _localctx = new TypeDataContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeData);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90; typeNamespace();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91; typeModule();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92; typeClass();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 93; typeEnum();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 94; typeValueType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 95; typePrimitive();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNamespaceContext : ParserRuleContext {
		public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public TypeNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNamespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNamespaceContext typeNamespace() {
		TypeNamespaceContext _localctx = new TypeNamespaceContext(Context, State);
		EnterRule(_localctx, 8, RULE_typeNamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(T__2);
			State = 99; Match(UNQUOTED_STRING);
			State = 100; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeModuleContext : ParserRuleContext {
		public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public TypeModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeModule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeModuleContext typeModule() {
		TypeModuleContext _localctx = new TypeModuleContext(Context, State);
		EnterRule(_localctx, 10, RULE_typeModule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(T__4);
			State = 103; Match(UNQUOTED_STRING);
			State = 104; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAttributesContext : ParserRuleContext {
		public TypeAttributeContext[] typeAttribute() {
			return GetRuleContexts<TypeAttributeContext>();
		}
		public TypeAttributeContext typeAttribute(int i) {
			return GetRuleContext<TypeAttributeContext>(i);
		}
		public ClassAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterClassAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitClassAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAttributesContext classAttributes() {
		ClassAttributesContext _localctx = new ClassAttributesContext(Context, State);
		EnterRule(_localctx, 12, RULE_classAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; typeAttribute();
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 107; Match(T__5);
				State = 108; typeAttribute();
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAttributesContext : ParserRuleContext {
		public TypeAttributeContext[] typeAttribute() {
			return GetRuleContexts<TypeAttributeContext>();
		}
		public TypeAttributeContext typeAttribute(int i) {
			return GetRuleContext<TypeAttributeContext>(i);
		}
		public TypeAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAttributesContext typeAttributes() {
		TypeAttributesContext _localctx = new TypeAttributesContext(Context, State);
		EnterRule(_localctx, 14, RULE_typeAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(T__6);
			State = 115; typeAttribute();
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 116; Match(T__5);
				State = 117; typeAttribute();
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 123; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAttributeContext : ParserRuleContext {
		public NumeralTypeAttributeContext numeralTypeAttribute() {
			return GetRuleContext<NumeralTypeAttributeContext>(0);
		}
		public BasicTypeAttributeContext basicTypeAttribute() {
			return GetRuleContext<BasicTypeAttributeContext>(0);
		}
		public TypeAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAttributeContext typeAttribute() {
		TypeAttributeContext _localctx = new TypeAttributeContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeAttribute);
		try {
			State = 127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125; numeralTypeAttribute();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126; basicTypeAttribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicTypeAttributeContext : ParserRuleContext {
		public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public BasicTypeAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicTypeAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterBasicTypeAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitBasicTypeAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicTypeAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicTypeAttributeContext basicTypeAttribute() {
		BasicTypeAttributeContext _localctx = new BasicTypeAttributeContext(Context, State);
		EnterRule(_localctx, 18, RULE_basicTypeAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumeralTypeAttributeContext : ParserRuleContext {
		public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		public NumeralTypeAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeralTypeAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterNumeralTypeAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitNumeralTypeAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeralTypeAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumeralTypeAttributeContext numeralTypeAttribute() {
		NumeralTypeAttributeContext _localctx = new NumeralTypeAttributeContext(Context, State);
		EnterRule(_localctx, 20, RULE_numeralTypeAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(UNQUOTED_STRING);
			State = 132; Match(T__8);
			State = 133; numeral();
			State = 134; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeEnumContext : ParserRuleContext {
		public EnumNameContext enumName() {
			return GetRuleContext<EnumNameContext>(0);
		}
		public TypeAttributesContext typeAttributes() {
			return GetRuleContext<TypeAttributesContext>(0);
		}
		public EnumDataContext[] enumData() {
			return GetRuleContexts<EnumDataContext>();
		}
		public EnumDataContext enumData(int i) {
			return GetRuleContext<EnumDataContext>(i);
		}
		public TypeEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeEnum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeEnum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeEnum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeEnumContext typeEnum() {
		TypeEnumContext _localctx = new TypeEnumContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 136; typeAttributes();
				}
			}

			State = 139; Match(T__10);
			State = 140; enumName();
			State = 141; Match(T__11);
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==UNQUOTED_STRING) {
				{
				{
				State = 142; enumData();
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 148; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumNameContext : ParserRuleContext {
		public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public EnumNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterEnumName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitEnumName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumNameContext enumName() {
		EnumNameContext _localctx = new EnumNameContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDataContext : ParserRuleContext {
		public EnumValuePairContext[] enumValuePair() {
			return GetRuleContexts<EnumValuePairContext>();
		}
		public EnumValuePairContext enumValuePair(int i) {
			return GetRuleContext<EnumValuePairContext>(i);
		}
		public EnumDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumData; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterEnumData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitEnumData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDataContext enumData() {
		EnumDataContext _localctx = new EnumDataContext(Context, State);
		EnterRule(_localctx, 26, RULE_enumData);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; enumValuePair();
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 153; Match(T__5);
				State = 154; enumValuePair();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValuePairContext : ParserRuleContext {
		public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		public EnumValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValuePair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterEnumValuePair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitEnumValuePair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValuePairContext enumValuePair() {
		EnumValuePairContext _localctx = new EnumValuePairContext(Context, State);
		EnterRule(_localctx, 28, RULE_enumValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(UNQUOTED_STRING);
			State = 161; Match(T__13);
			State = 162; numeral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeClassContext : ParserRuleContext {
		public ClassTypeNameContext classTypeName() {
			return GetRuleContext<ClassTypeNameContext>(0);
		}
		public TypeAttributesContext typeAttributes() {
			return GetRuleContext<TypeAttributesContext>(0);
		}
		public ClassAttributesContext classAttributes() {
			return GetRuleContext<ClassAttributesContext>(0);
		}
		public ClassInherritsContext classInherrits() {
			return GetRuleContext<ClassInherritsContext>(0);
		}
		public StructureDataContext[] structureData() {
			return GetRuleContexts<StructureDataContext>();
		}
		public StructureDataContext structureData(int i) {
			return GetRuleContext<StructureDataContext>(i);
		}
		public TypeClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeClassContext typeClass() {
		TypeClassContext _localctx = new TypeClassContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 164; typeAttributes();
				}
			}

			State = 167; Match(T__14);
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 168; classAttributes();
				}
				break;
			}
			State = 171; classTypeName();
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 172; classInherrits();
				}
			}

			State = 175; Match(T__11);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__18) | (1L << UNQUOTED_STRING))) != 0)) {
				{
				{
				State = 176; structureData();
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 182; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeNameContext : ParserRuleContext {
		public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public ClassTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterClassTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitClassTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeNameContext classTypeName() {
		ClassTypeNameContext _localctx = new ClassTypeNameContext(Context, State);
		EnterRule(_localctx, 32, RULE_classTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInherritsContext : ParserRuleContext {
		public ClassInherritContext[] classInherrit() {
			return GetRuleContexts<ClassInherritContext>();
		}
		public ClassInherritContext classInherrit(int i) {
			return GetRuleContext<ClassInherritContext>(i);
		}
		public ClassInherritsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInherrits; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterClassInherrits(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitClassInherrits(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInherrits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInherritsContext classInherrits() {
		ClassInherritsContext _localctx = new ClassInherritsContext(Context, State);
		EnterRule(_localctx, 34, RULE_classInherrits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(T__15);
			State = 187; classInherrit();
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 188; Match(T__5);
				State = 189; classInherrit();
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInherritContext : ParserRuleContext {
		public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public ClassInherritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInherrit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterClassInherrit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitClassInherrit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInherrit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInherritContext classInherrit() {
		ClassInherritContext _localctx = new ClassInherritContext(Context, State);
		EnterRule(_localctx, 36, RULE_classInherrit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeValueTypeContext : ParserRuleContext {
		public ValueTypeIdentifierContext valueTypeIdentifier() {
			return GetRuleContext<ValueTypeIdentifierContext>(0);
		}
		public ValueTypeNameContext valueTypeName() {
			return GetRuleContext<ValueTypeNameContext>(0);
		}
		public TypeAttributesContext typeAttributes() {
			return GetRuleContext<TypeAttributesContext>(0);
		}
		public ClassAttributesContext classAttributes() {
			return GetRuleContext<ClassAttributesContext>(0);
		}
		public StructureDataContext[] structureData() {
			return GetRuleContexts<StructureDataContext>();
		}
		public StructureDataContext structureData(int i) {
			return GetRuleContext<StructureDataContext>(i);
		}
		public TypeValueTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeValueType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypeValueType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypeValueType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeValueType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeValueTypeContext typeValueType() {
		TypeValueTypeContext _localctx = new TypeValueTypeContext(Context, State);
		EnterRule(_localctx, 38, RULE_typeValueType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 197; typeAttributes();
				}
			}

			State = 200; valueTypeIdentifier();
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 201; classAttributes();
				}
				break;
			}
			State = 204; valueTypeName();
			State = 205; Match(T__11);
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__18) | (1L << UNQUOTED_STRING))) != 0)) {
				{
				{
				State = 206; structureData();
				}
				}
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 212; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueTypeIdentifierContext : ParserRuleContext {
		public ValueTypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueTypeIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterValueTypeIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitValueTypeIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTypeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypeIdentifierContext valueTypeIdentifier() {
		ValueTypeIdentifierContext _localctx = new ValueTypeIdentifierContext(Context, State);
		EnterRule(_localctx, 40, RULE_valueTypeIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			_la = TokenStream.LA(1);
			if ( !(_la==T__16 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueTypeNameContext : ParserRuleContext {
		public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public ValueTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterValueTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitValueTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypeNameContext valueTypeName() {
		ValueTypeNameContext _localctx = new ValueTypeNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_valueTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureDataContext : ParserRuleContext {
		public MemberDataContext memberData() {
			return GetRuleContext<MemberDataContext>(0);
		}
		public StructureDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureData; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterStructureData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitStructureData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureDataContext structureData() {
		StructureDataContext _localctx = new StructureDataContext(Context, State);
		EnterRule(_localctx, 44, RULE_structureData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; memberData();
			State = 219; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDataContext : ParserRuleContext {
		public MemberTypeNameContext memberTypeName() {
			return GetRuleContext<MemberTypeNameContext>(0);
		}
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public MemberOffsetContext memberOffset() {
			return GetRuleContext<MemberOffsetContext>(0);
		}
		public TypeAttributesContext typeAttributes() {
			return GetRuleContext<TypeAttributesContext>(0);
		}
		public MemberVisibilityContext memberVisibility() {
			return GetRuleContext<MemberVisibilityContext>(0);
		}
		public MemberArrayTypeContext memberArrayType() {
			return GetRuleContext<MemberArrayTypeContext>(0);
		}
		public MemberDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberData; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDataContext memberData() {
		MemberDataContext _localctx = new MemberDataContext(Context, State);
		EnterRule(_localctx, 46, RULE_memberData);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 221; typeAttributes();
				}
			}

			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 224; memberVisibility();
				}
			}

			State = 227; memberTypeName();
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 228; memberArrayType();
				}
			}

			State = 231; memberName();
			State = 232; Match(T__15);
			State = 233; memberOffset();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberVisibilityContext : ParserRuleContext {
		public MemberVisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberVisibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberVisibilityContext memberVisibility() {
		MemberVisibilityContext _localctx = new MemberVisibilityContext(Context, State);
		EnterRule(_localctx, 48, RULE_memberVisibility);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberTypeNameContext : ParserRuleContext {
		public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public MemberTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberTypeNameContext memberTypeName() {
		MemberTypeNameContext _localctx = new MemberTypeNameContext(Context, State);
		EnterRule(_localctx, 50, RULE_memberTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberArrayTypeContext : ParserRuleContext {
		public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		public MemberArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberArrayTypeContext memberArrayType() {
		MemberArrayTypeContext _localctx = new MemberArrayTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_memberArrayType);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239; Match(T__6);
				State = 240; Match(T__7);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241; Match(T__6);
				State = 242; numeral();
				State = 243; Match(T__7);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberNameContext : ParserRuleContext {
		public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public MemberNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberNameContext memberName() {
		MemberNameContext _localctx = new MemberNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_memberName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberOffsetContext : ParserRuleContext {
		public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		public MemberOffsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberOffset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterMemberOffset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitMemberOffset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberOffset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberOffsetContext memberOffset() {
		MemberOffsetContext _localctx = new MemberOffsetContext(Context, State);
		EnterRule(_localctx, 56, RULE_memberOffset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; numeral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePrimitiveContext : ParserRuleContext {
		public TypeAttributesContext typeAttributes() {
			return GetRuleContext<TypeAttributesContext>(0);
		}
		public PrimitiveTypeNameContext primitiveTypeName() {
			return GetRuleContext<PrimitiveTypeNameContext>(0);
		}
		public TypePrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePrimitive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterTypePrimitive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitTypePrimitive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypePrimitive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypePrimitiveContext typePrimitive() {
		TypePrimitiveContext _localctx = new TypePrimitiveContext(Context, State);
		EnterRule(_localctx, 58, RULE_typePrimitive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; typeAttributes();
			State = 252; Match(T__19);
			State = 253; primitiveTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeNameContext : ParserRuleContext {
		public ITerminalNode UNQUOTED_STRING() { return GetToken(FBTParser.UNQUOTED_STRING, 0); }
		public PrimitiveTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterPrimitiveTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitPrimitiveTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeNameContext primitiveTypeName() {
		PrimitiveTypeNameContext _localctx = new PrimitiveTypeNameContext(Context, State);
		EnterRule(_localctx, 60, RULE_primitiveTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumeralContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(FBTParser.NUMBER, 0); }
		public ITerminalNode FLOAT() { return GetToken(FBTParser.FLOAT, 0); }
		public ITerminalNode HEX() { return GetToken(FBTParser.HEX, 0); }
		public NumeralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.EnterNumeral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFBTListener typedListener = listener as IFBTListener;
			if (typedListener != null) typedListener.ExitNumeral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFBTVisitor<TResult> typedVisitor = visitor as IFBTVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumeralContext numeral() {
		NumeralContext _localctx = new NumeralContext(Context, State);
		EnterRule(_localctx, 62, RULE_numeral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << FLOAT) | (1L << HEX))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1E', '\x106', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x3', '\x2', '\x3', '\x2', '\a', 
		'\x2', '\x45', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'H', '\v', '\x2', 
		'\x3', '\x2', '\x6', '\x2', 'K', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 
		'L', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 'Q', '\n', '\x2', '\x3', 
		'\x3', '\a', '\x3', 'T', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'W', 
		'\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x63', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'p', '\n', '\b', 
		'\f', '\b', '\xE', '\b', 's', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\a', '\t', 'y', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'|', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\x82', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x5', '\r', 
		'\x8C', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\x92', '\n', '\r', '\f', '\r', '\xE', '\r', '\x95', '\v', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x9E', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', '\xA1', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x5', '\x11', '\xA8', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xAC', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\xB0', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\a', '\x11', '\xB4', '\n', '\x11', '\f', '\x11', '\xE', 
		'\x11', '\xB7', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\a', '\x13', '\xC1', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xC4', 
		'\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x5', '\x15', 
		'\xC9', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xCD', 
		'\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', 
		'\xD2', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xD5', '\v', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', 
		'\x5', '\x19', '\xE1', '\n', '\x19', '\x3', '\x19', '\x5', '\x19', '\xE4', 
		'\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\xE8', '\n', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', 
		'\x1C', '\xF8', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x2', '\x2', 
		'\"', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x2', '\x4', '\x3', '\x2', '\x13', '\x14', '\x4', '\x2', '\x17', '\x18', 
		'\x1E', '\x1E', '\x2', '\x100', '\x2', 'P', '\x3', '\x2', '\x2', '\x2', 
		'\x4', 'U', '\x3', '\x2', '\x2', '\x2', '\x6', 'X', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x62', '\x3', '\x2', '\x2', '\x2', '\n', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'h', '\x3', '\x2', '\x2', '\x2', '\xE', 'l', 
		'\x3', '\x2', '\x2', '\x2', '\x10', 't', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x14', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x85', '\x3', '\x2', '\x2', '\x2', '\x18', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\xA7', '\x3', '\x2', '\x2', '\x2', '\"', '\xBA', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xBC', '\x3', '\x2', '\x2', '\x2', '&', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '(', '\xC8', '\x3', '\x2', '\x2', '\x2', '*', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', ',', '\xDA', '\x3', '\x2', '\x2', '\x2', '.', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\x30', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\xED', '\x3', '\x2', '\x2', '\x2', '\x34', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', ':', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '<', '\xFD', '\x3', '\x2', '\x2', '\x2', '>', '\x101', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x103', '\x3', '\x2', '\x2', '\x2', '\x42', '\x46', 
		'\x5', '\x4', '\x3', '\x2', '\x43', '\x45', '\x5', '\b', '\x5', '\x2', 
		'\x44', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'Q', '\x3', '\x2', '\x2', '\x2', 'H', 
		'\x46', '\x3', '\x2', '\x2', '\x2', 'I', 'K', '\x5', '\b', '\x5', '\x2', 
		'J', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\x2', '\x2', '\x3', 
		'O', 'Q', '\x3', '\x2', '\x2', '\x2', 'P', '\x42', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'J', '\x3', '\x2', '\x2', '\x2', 'Q', '\x3', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'T', '\x5', '\x6', '\x4', '\x2', 'S', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'W', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', '\x5', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', 
		'\x3', '\x2', '\x2', 'Y', 'Z', '\a', '\x4', '\x2', '\x2', 'Z', '[', '\a', 
		'\x1B', '\x2', '\x2', '[', '\a', '\x3', '\x2', '\x2', '\x2', '\\', '\x63', 
		'\x5', '\n', '\x6', '\x2', ']', '\x63', '\x5', '\f', '\a', '\x2', '^', 
		'\x63', '\x5', ' ', '\x11', '\x2', '_', '\x63', '\x5', '\x18', '\r', '\x2', 
		'`', '\x63', '\x5', '(', '\x15', '\x2', '\x61', '\x63', '\x5', '<', '\x1F', 
		'\x2', '\x62', '\\', '\x3', '\x2', '\x2', '\x2', '\x62', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '^', '\x3', '\x2', '\x2', '\x2', '\x62', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x65', '\a', '\x5', '\x2', '\x2', '\x65', '\x66', '\a', 
		'\x19', '\x2', '\x2', '\x66', 'g', '\a', '\x6', '\x2', '\x2', 'g', '\v', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '\a', '\x2', '\x2', 'i', 'j', 
		'\a', '\x19', '\x2', '\x2', 'j', 'k', '\a', '\x6', '\x2', '\x2', 'k', 
		'\r', '\x3', '\x2', '\x2', '\x2', 'l', 'q', '\x5', '\x12', '\n', '\x2', 
		'm', 'n', '\a', '\b', '\x2', '\x2', 'n', 'p', '\x5', '\x12', '\n', '\x2', 
		'o', 'm', '\x3', '\x2', '\x2', '\x2', 'p', 's', '\x3', '\x2', '\x2', '\x2', 
		'q', 'o', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 
		'r', '\xF', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', 
		'\x2', 't', 'u', '\a', '\t', '\x2', '\x2', 'u', 'z', '\x5', '\x12', '\n', 
		'\x2', 'v', 'w', '\a', '\b', '\x2', '\x2', 'w', 'y', '\x5', '\x12', '\n', 
		'\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'y', '|', '\x3', '\x2', '\x2', 
		'\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', 
		'\x2', '{', '}', '\x3', '\x2', '\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', 
		'\x2', '}', '~', '\a', '\n', '\x2', '\x2', '~', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x82', '\x5', '\x16', '\f', '\x2', '\x80', '\x82', 
		'\x5', '\x14', '\v', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x84', '\a', '\x19', '\x2', '\x2', '\x84', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\a', '\x19', '\x2', '\x2', 
		'\x86', '\x87', '\a', '\v', '\x2', '\x2', '\x87', '\x88', '\x5', '@', 
		'!', '\x2', '\x88', '\x89', '\a', '\f', '\x2', '\x2', '\x89', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x8C', '\x5', '\x10', '\t', '\x2', 
		'\x8B', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', 
		'\a', '\r', '\x2', '\x2', '\x8E', '\x8F', '\x5', '\x1A', '\xE', '\x2', 
		'\x8F', '\x93', '\a', '\xE', '\x2', '\x2', '\x90', '\x92', '\x5', '\x1C', 
		'\xF', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', 
		'\a', '\xF', '\x2', '\x2', '\x97', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x99', '\a', '\x19', '\x2', '\x2', '\x99', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x9F', '\x5', '\x1E', '\x10', '\x2', '\x9B', '\x9C', 
		'\a', '\b', '\x2', '\x2', '\x9C', '\x9E', '\x5', '\x1E', '\x10', '\x2', 
		'\x9D', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\a', '\x19', 
		'\x2', '\x2', '\xA3', '\xA4', '\a', '\x10', '\x2', '\x2', '\xA4', '\xA5', 
		'\x5', '@', '!', '\x2', '\xA5', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA8', '\x5', '\x10', '\t', '\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xAB', '\a', '\x11', '\x2', '\x2', '\xAA', 
		'\xAC', '\x5', '\xE', '\b', '\x2', '\xAB', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\xAF', '\x5', '\"', '\x12', '\x2', '\xAE', 
		'\xB0', '\x5', '$', '\x13', '\x2', '\xAF', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xB5', '\a', '\xE', '\x2', '\x2', '\xB2', 
		'\xB4', '\x5', '.', '\x18', '\x2', '\xB3', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB9', '\a', '\xF', '\x2', '\x2', '\xB9', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBB', '\a', '\x19', '\x2', '\x2', '\xBB', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\a', '\x12', '\x2', 
		'\x2', '\xBD', '\xC2', '\x5', '&', '\x14', '\x2', '\xBE', '\xBF', '\a', 
		'\b', '\x2', '\x2', '\xBF', '\xC1', '\x5', '&', '\x14', '\x2', '\xC0', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '%', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', '\x19', '\x2', 
		'\x2', '\xC6', '\'', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC9', '\x5', 
		'\x10', '\t', '\x2', '\xC8', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xCC', '\x5', '*', '\x16', '\x2', '\xCB', '\xCD', '\x5', 
		'\xE', '\b', '\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xCF', '\x5', ',', '\x17', '\x2', '\xCF', '\xD3', '\a', 
		'\xE', '\x2', '\x2', '\xD0', '\xD2', '\x5', '.', '\x18', '\x2', '\xD1', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\a', '\xF', '\x2', 
		'\x2', '\xD7', ')', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\t', 
		'\x2', '\x2', '\x2', '\xD9', '+', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xDB', '\a', '\x19', '\x2', '\x2', '\xDB', '-', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xDD', '\x5', '\x30', '\x19', '\x2', '\xDD', '\xDE', '\a', 
		'\x6', '\x2', '\x2', '\xDE', '/', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE1', '\x5', '\x10', '\t', '\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE4', '\x5', '\x32', '\x1A', '\x2', '\xE3', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE7', '\x5', 
		'\x34', '\x1B', '\x2', '\xE6', '\xE8', '\x5', '\x36', '\x1C', '\x2', '\xE7', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\x5', 
		'\x38', '\x1D', '\x2', '\xEA', '\xEB', '\a', '\x12', '\x2', '\x2', '\xEB', 
		'\xEC', '\x5', ':', '\x1E', '\x2', '\xEC', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xEE', '\a', '\x15', '\x2', '\x2', '\xEE', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xF0', '\a', '\x19', '\x2', '\x2', '\xF0', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\a', '\t', '\x2', 
		'\x2', '\xF2', '\xF8', '\a', '\n', '\x2', '\x2', '\xF3', '\xF4', '\a', 
		'\t', '\x2', '\x2', '\xF4', '\xF5', '\x5', '@', '!', '\x2', '\xF5', '\xF6', 
		'\a', '\n', '\x2', '\x2', '\xF6', '\xF8', '\x3', '\x2', '\x2', '\x2', 
		'\xF7', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\xF8', '\x37', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', 
		'\a', '\x19', '\x2', '\x2', '\xFA', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\xFB', '\xFC', '\x5', '@', '!', '\x2', '\xFC', ';', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xFE', '\x5', '\x10', '\t', '\x2', '\xFE', '\xFF', '\a', 
		'\x16', '\x2', '\x2', '\xFF', '\x100', '\x5', '>', ' ', '\x2', '\x100', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\a', '\x19', '\x2', 
		'\x2', '\x102', '?', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\t', 
		'\x3', '\x2', '\x2', '\x104', '\x41', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x46', 'L', 'P', 'U', '\x62', 'q', 'z', '\x81', '\x8B', '\x93', '\x9F', 
		'\xA7', '\xAB', '\xAF', '\xB5', '\xC2', '\xC8', '\xCC', '\xD3', '\xE0', 
		'\xE3', '\xE7', '\xF7',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
